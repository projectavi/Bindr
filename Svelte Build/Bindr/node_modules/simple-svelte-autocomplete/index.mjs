function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
class HtmlTag {
    constructor(anchor = null) {
        this.a = anchor;
        this.e = this.n = null;
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.h(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src/SimpleAutocomplete.svelte generated by Svelte v3.37.0 */

function add_css() {
	var style = element("style");
	style.id = "svelte-77usy-style";
	style.textContent = ".autocomplete.svelte-77usy.svelte-77usy{min-width:200px;display:inline-block;max-width:100%;position:relative;vertical-align:top;height:2.25em}.autocomplete.svelte-77usy.svelte-77usy:not(.hide-arrow)::after{border:3px solid transparent;border-radius:2px;border-right:0;border-top:0;content:\" \";display:block;height:0.625em;margin-top:-0.4375em;pointer-events:none;position:absolute;top:50%;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:center;transform-origin:center;width:0.625em;border-color:#3273dc;right:1.125em;z-index:4}.autocomplete.show-clear.svelte-77usy.svelte-77usy:not(.hide-arrow)::after{right:2.3em}.autocomplete.svelte-77usy .svelte-77usy{box-sizing:border-box}.autocomplete-input.svelte-77usy.svelte-77usy{font:inherit;width:100%;height:100%;padding:5px 11px}.autocomplete.svelte-77usy:not(.hide-arrow) .autocomplete-input.svelte-77usy{padding-right:2em}.autocomplete.show-clear.svelte-77usy:not(.hide-arrow) .autocomplete-input.svelte-77usy{padding-right:3.2em}.autocomplete.hide-arrow.show-clear.svelte-77usy .autocomplete-input.svelte-77usy{padding-right:2em}.autocomplete-list.svelte-77usy.svelte-77usy{background:#fff;position:relative;width:100%;overflow-y:auto;z-index:99;padding:10px 0;top:0px;border:1px solid #999;max-height:calc(15 * (1rem + 10px) + 15px);user-select:none}.autocomplete-list.svelte-77usy.svelte-77usy:empty{padding:0}.autocomplete-list-item.svelte-77usy.svelte-77usy{padding:5px 15px;color:#333;cursor:pointer;line-height:1}.autocomplete-list-item.selected.svelte-77usy.svelte-77usy{background-color:#2e69e2;color:#fff}.autocomplete-list-item-no-results.svelte-77usy.svelte-77usy{padding:5px 15px;color:#999;line-height:1}.autocomplete-list.hidden.svelte-77usy.svelte-77usy{display:none}.autocomplete.show-clear.svelte-77usy .autocomplete-clear-button.svelte-77usy{cursor:pointer;display:block;text-align:center;position:absolute;right:0.1em;padding:0.3em 0.6em;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);z-index:4}.autocomplete.svelte-77usy:not(.show-clear) .autocomplete-clear-button.svelte-77usy{display:none}";
	append(document.head, style);
}

const get_no_results_slot_changes = dirty => ({
	noResultsText: dirty[0] & /*noResultsText*/ 2
});

const get_no_results_slot_context = ctx => ({ noResultsText: /*noResultsText*/ ctx[1] });

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[79] = list[i];
	child_ctx[81] = i;
	return child_ctx;
}

const get_item_slot_changes = dirty => ({
	item: dirty[0] & /*filteredListItems*/ 131072,
	label: dirty[0] & /*filteredListItems*/ 131072
});

const get_item_slot_context = ctx => ({
	item: /*listItem*/ ctx[79].item,
	label: /*listItem*/ ctx[79].highlighted
	? /*listItem*/ ctx[79].highlighted.label
	: /*listItem*/ ctx[79].label
});

// (775:2) {#if showClear}
function create_if_block_6(ctx) {
	let span;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "✖";
			attr(span, "class", "autocomplete-clear-button svelte-77usy");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (!mounted) {
				dispose = listen(span, "click", /*clear*/ ctx[27]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (812:28) 
function create_if_block_5(ctx) {
	let div;
	let current;
	const no_results_slot_template = /*#slots*/ ctx[50]["no-results"];
	const no_results_slot = create_slot(no_results_slot_template, ctx, /*$$scope*/ ctx[49], get_no_results_slot_context);
	const no_results_slot_or_fallback = no_results_slot || fallback_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (no_results_slot_or_fallback) no_results_slot_or_fallback.c();
			attr(div, "class", "autocomplete-list-item-no-results svelte-77usy");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (no_results_slot_or_fallback) {
				no_results_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (no_results_slot) {
				if (no_results_slot.p && dirty[0] & /*noResultsText*/ 2 | dirty[1] & /*$$scope*/ 262144) {
					update_slot(no_results_slot, no_results_slot_template, ctx, /*$$scope*/ ctx[49], dirty, get_no_results_slot_changes, get_no_results_slot_context);
				}
			} else {
				if (no_results_slot_or_fallback && no_results_slot_or_fallback.p && dirty[0] & /*noResultsText*/ 2) {
					no_results_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(no_results_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(no_results_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (no_results_slot_or_fallback) no_results_slot_or_fallback.d(detaching);
		}
	};
}

// (782:4) {#if filteredListItems && filteredListItems.length > 0}
function create_if_block(ctx) {
	let t;
	let if_block_anchor;
	let current;
	let each_value = /*filteredListItems*/ ctx[17];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block = /*maxItemsToShowInList*/ ctx[0] > 0 && /*filteredListItems*/ ctx[17].length > /*maxItemsToShowInList*/ ctx[0] && create_if_block_1(ctx);

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*highlightIndex, onListItemClick, filteredListItems, maxItemsToShowInList*/ 1212417 | dirty[1] & /*$$scope*/ 262144) {
				each_value = /*filteredListItems*/ ctx[17];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t.parentNode, t);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*maxItemsToShowInList*/ ctx[0] > 0 && /*filteredListItems*/ ctx[17].length > /*maxItemsToShowInList*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (814:48) {noResultsText}
function fallback_block_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*noResultsText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*noResultsText*/ 2) set_data(t, /*noResultsText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (784:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}
function create_if_block_2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*listItem*/ ctx[79] && create_if_block_3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*listItem*/ ctx[79]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*filteredListItems*/ 131072) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (785:10) {#if listItem}
function create_if_block_3(ctx) {
	let div;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	const item_slot_template = /*#slots*/ ctx[50].item;
	const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[49], get_item_slot_context);
	const item_slot_or_fallback = item_slot || fallback_block(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[53](/*listItem*/ ctx[79]);
	}

	function pointerenter_handler() {
		return /*pointerenter_handler*/ ctx[54](/*i*/ ctx[81]);
	}

	return {
		c() {
			div = element("div");
			if (item_slot_or_fallback) item_slot_or_fallback.c();

			attr(div, "class", div_class_value = "autocomplete-list-item " + (/*i*/ ctx[81] === /*highlightIndex*/ ctx[15]
			? "selected"
			: "") + " svelte-77usy");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (item_slot_or_fallback) {
				item_slot_or_fallback.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", click_handler),
					listen(div, "pointerenter", pointerenter_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (item_slot) {
				if (item_slot.p && dirty[0] & /*filteredListItems*/ 131072 | dirty[1] & /*$$scope*/ 262144) {
					update_slot(item_slot, item_slot_template, ctx, /*$$scope*/ ctx[49], dirty, get_item_slot_changes, get_item_slot_context);
				}
			} else {
				if (item_slot_or_fallback && item_slot_or_fallback.p && dirty[0] & /*filteredListItems*/ 131072) {
					item_slot_or_fallback.p(ctx, dirty);
				}
			}

			if (!current || dirty[0] & /*highlightIndex*/ 32768 && div_class_value !== (div_class_value = "autocomplete-list-item " + (/*i*/ ctx[81] === /*highlightIndex*/ ctx[15]
			? "selected"
			: "") + " svelte-77usy")) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(item_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(item_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (798:16) {:else}
function create_else_block(ctx) {
	let html_tag;
	let raw_value = /*listItem*/ ctx[79].label + "";
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredListItems*/ 131072 && raw_value !== (raw_value = /*listItem*/ ctx[79].label + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (796:16) {#if listItem.highlighted}
function create_if_block_4(ctx) {
	let html_tag;
	let raw_value = /*listItem*/ ctx[79].highlighted.label + "";
	let html_anchor;

	return {
		c() {
			html_anchor = empty();
			html_tag = new HtmlTag(html_anchor);
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredListItems*/ 131072 && raw_value !== (raw_value = /*listItem*/ ctx[79].highlighted.label + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (795:91)                  
function fallback_block(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*listItem*/ ctx[79].highlighted) return create_if_block_4;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (783:6) {#each filteredListItems as listItem, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*listItem*/ ctx[79] && (/*maxItemsToShowInList*/ ctx[0] <= 0 || /*i*/ ctx[81] < /*maxItemsToShowInList*/ ctx[0]) && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*listItem*/ ctx[79] && (/*maxItemsToShowInList*/ ctx[0] <= 0 || /*i*/ ctx[81] < /*maxItemsToShowInList*/ ctx[0])) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*filteredListItems, maxItemsToShowInList*/ 131073) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (807:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}
function create_if_block_1(ctx) {
	let div;
	let t0;
	let t1_value = /*filteredListItems*/ ctx[17].length - /*maxItemsToShowInList*/ ctx[0] + "";
	let t1;
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text("...");
			t1 = text(t1_value);
			t2 = text(" results not shown");
			attr(div, "class", "autocomplete-list-item-no-results svelte-77usy");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredListItems, maxItemsToShowInList*/ 131073 && t1_value !== (t1_value = /*filteredListItems*/ ctx[17].length - /*maxItemsToShowInList*/ ctx[0] + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let input_1;
	let input_1_class_value;
	let input_1_id_value;
	let input_1_autocomplete_value;
	let t0;
	let t1;
	let div0;
	let current_block_type_index;
	let if_block1;
	let div0_class_value;
	let div1_class_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*showClear*/ ctx[11] && create_if_block_6(ctx);
	const if_block_creators = [create_if_block, create_if_block_5];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*filteredListItems*/ ctx[17] && /*filteredListItems*/ ctx[17].length > 0) return 0;
		if (/*noResultsText*/ ctx[1]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			div1 = element("div");
			input_1 = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			attr(input_1, "type", "text");

			attr(input_1, "class", input_1_class_value = "" + ((/*inputClassName*/ ctx[4]
			? /*inputClassName*/ ctx[4]
			: "") + " input autocomplete-input" + " svelte-77usy"));

			attr(input_1, "id", input_1_id_value = /*inputId*/ ctx[5] ? /*inputId*/ ctx[5] : "");
			attr(input_1, "autocomplete", input_1_autocomplete_value = /*html5autocomplete*/ ctx[8] ? "on" : "off");
			attr(input_1, "placeholder", /*placeholder*/ ctx[2]);
			attr(input_1, "name", /*name*/ ctx[6]);
			input_1.disabled = /*disabled*/ ctx[12];
			attr(input_1, "title", /*title*/ ctx[7]);

			attr(div0, "class", div0_class_value = "" + ((/*dropdownClassName*/ ctx[9]
			? /*dropdownClassName*/ ctx[9]
			: "") + " autocomplete-list " + (/*showList*/ ctx[18] ? "" : "hidden") + "\n    is-fullwidth" + " svelte-77usy"));

			attr(div1, "class", div1_class_value = "" + ((/*className*/ ctx[3] ? /*className*/ ctx[3] : "") + "\n  " + (/*hideArrow*/ ctx[10] ? "hide-arrow is-multiple" : "") + "\n  " + (/*showClear*/ ctx[11] ? "show-clear" : "") + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[19] + " svelte-77usy"));
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, input_1);
			/*input_1_binding*/ ctx[51](input_1);
			set_input_value(input_1, /*text*/ ctx[16]);
			append(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t1);
			append(div1, div0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div0, null);
			}

			/*div0_binding*/ ctx[55](div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*onDocumentClick*/ ctx[21]),
					listen(input_1, "input", /*input_1_input_handler*/ ctx[52]),
					listen(input_1, "input", /*onInput*/ ctx[24]),
					listen(input_1, "focus", /*onFocus*/ ctx[26]),
					listen(input_1, "keydown", /*onKeyDown*/ ctx[22]),
					listen(input_1, "click", /*onInputClick*/ ctx[25]),
					listen(input_1, "keypress", /*onKeyPress*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*inputClassName*/ 16 && input_1_class_value !== (input_1_class_value = "" + ((/*inputClassName*/ ctx[4]
			? /*inputClassName*/ ctx[4]
			: "") + " input autocomplete-input" + " svelte-77usy"))) {
				attr(input_1, "class", input_1_class_value);
			}

			if (!current || dirty[0] & /*inputId*/ 32 && input_1_id_value !== (input_1_id_value = /*inputId*/ ctx[5] ? /*inputId*/ ctx[5] : "")) {
				attr(input_1, "id", input_1_id_value);
			}

			if (!current || dirty[0] & /*html5autocomplete*/ 256 && input_1_autocomplete_value !== (input_1_autocomplete_value = /*html5autocomplete*/ ctx[8] ? "on" : "off")) {
				attr(input_1, "autocomplete", input_1_autocomplete_value);
			}

			if (!current || dirty[0] & /*placeholder*/ 4) {
				attr(input_1, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (!current || dirty[0] & /*name*/ 64) {
				attr(input_1, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty[0] & /*disabled*/ 4096) {
				input_1.disabled = /*disabled*/ ctx[12];
			}

			if (!current || dirty[0] & /*title*/ 128) {
				attr(input_1, "title", /*title*/ ctx[7]);
			}

			if (dirty[0] & /*text*/ 65536 && input_1.value !== /*text*/ ctx[16]) {
				set_input_value(input_1, /*text*/ ctx[16]);
			}

			if (/*showClear*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					} else {
						if_block1.p(ctx, dirty);
					}

					transition_in(if_block1, 1);
					if_block1.m(div0, null);
				} else {
					if_block1 = null;
				}
			}

			if (!current || dirty[0] & /*dropdownClassName, showList*/ 262656 && div0_class_value !== (div0_class_value = "" + ((/*dropdownClassName*/ ctx[9]
			? /*dropdownClassName*/ ctx[9]
			: "") + " autocomplete-list " + (/*showList*/ ctx[18] ? "" : "hidden") + "\n    is-fullwidth" + " svelte-77usy"))) {
				attr(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*className, hideArrow, showClear*/ 3080 && div1_class_value !== (div1_class_value = "" + ((/*className*/ ctx[3] ? /*className*/ ctx[3] : "") + "\n  " + (/*hideArrow*/ ctx[10] ? "hide-arrow is-multiple" : "") + "\n  " + (/*showClear*/ ctx[11] ? "show-clear" : "") + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[19] + " svelte-77usy"))) {
				attr(div1, "class", div1_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			/*input_1_binding*/ ctx[51](null);
			if (if_block0) if_block0.d();

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			/*div0_binding*/ ctx[55](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function safeStringFunction(theFunction, argument) {
	if (typeof theFunction !== "function") {
		console.error("Not a function: " + theFunction + ", argument: " + argument);
	}

	let originalResult;

	try {
		originalResult = theFunction(argument);
	} catch(error) {
		console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
	}

	let result = originalResult;

	if (result === undefined || result === null) {
		result = "";
	}

	if (typeof result !== "string") {
		result = result.toString();
	}

	return result;
}

function instance($$self, $$props, $$invalidate) {
	let showList;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { items = [] } = $$props;
	let { searchFunction = false } = $$props;
	let { labelFieldName = undefined } = $$props;
	let { keywordsFieldName = labelFieldName } = $$props;
	let { valueFieldName = undefined } = $$props;

	let { labelFunction = function (item) {
		if (item === undefined || item === null) {
			return "";
		}

		return labelFieldName ? item[labelFieldName] : item;
	} } = $$props;

	let { keywordsFunction = function (item) {
		if (item === undefined || item === null) {
			return "";
		}

		return keywordsFieldName
		? item[keywordsFieldName]
		: labelFunction(item);
	} } = $$props;

	let { valueFunction = function (item) {
		if (item === undefined || item === null) {
			return item;
		}

		return valueFieldName ? item[valueFieldName] : item;
	} } = $$props;

	let { keywordsCleanFunction = function (keywords) {
		return keywords;
	} } = $$props;

	let { textCleanFunction = function (userEnteredText) {
		return userEnteredText;
	} } = $$props;

	let { beforeChange = function (oldSelectedItem, newSelectedItem) {
		return true;
	} } = $$props;

	let { onChange = function (newSelectedItem) {
		
	} } = $$props;

	let { selectFirstIfEmpty = false } = $$props;
	let { minCharactersToSearch = 1 } = $$props;
	let { maxItemsToShowInList = 0 } = $$props;
	let { delay = 0 } = $$props;
	let { localFiltering = true } = $$props;
	let { noResultsText = "No results found" } = $$props;
	let { placeholder = undefined } = $$props;
	let { className = undefined } = $$props;
	let { inputClassName = undefined } = $$props;
	let { inputId = undefined } = $$props;
	let { name = undefined } = $$props;
	let { title = undefined } = $$props;
	let { html5autocomplete = undefined } = $$props;
	let { dropdownClassName = undefined } = $$props;
	let { hideArrow = false } = $$props;
	let { showClear = false } = $$props;
	let { disabled = false } = $$props;
	let { debug = false } = $$props;
	let { selectedItem = undefined } = $$props;
	let { value = undefined } = $$props;

	// --- Internal State ----
	const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);

	// HTML elements
	let input;

	let list;

	// UI state
	let opened = false;

	let highlightIndex = -1;
	let text;
	let filteredTextLength = 0;

	// view model
	let filteredListItems;

	let listItems = [];

	// other state
	let inputDelayTimeout;

	// -- Reactivity --
	function onSelectedItemChanged() {
		$$invalidate(30, value = valueFunction(selectedItem));
		$$invalidate(16, text = safeLabelFunction(selectedItem));
		onChange(selectedItem);
	}

	function safeLabelFunction(item) {
		// console.log("labelFunction: " + labelFunction);
		// console.log("safeLabelFunction, item: " + item);
		return safeStringFunction(labelFunction, item);
	}

	function safeKeywordsFunction(item) {
		// console.log("safeKeywordsFunction");
		const keywords = safeStringFunction(keywordsFunction, item);

		let result = safeStringFunction(keywordsCleanFunction, keywords);
		result = result.toLowerCase().trim();

		if (debug) {
			console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
		}

		return result;
	}

	function prepareListItems() {
		let tStart;

		if (debug) {
			tStart = performance.now();
			console.log("prepare items to search");
			console.log("items: " + JSON.stringify(items));
		}

		if (!Array.isArray(items)) {
			console.warn("Autocomplete items / search function did not return array but", items);
			$$invalidate(28, items = []);
		}

		const length = items ? items.length : 0;
		listItems = new Array(length);

		if (length > 0) {
			items.forEach((item, i) => {
				const listItem = getListItem(item);

				if (listItem == undefined) {
					console.log("Undefined item for: ", item);
				}

				listItems[i] = listItem;
			});
		}

		if (debug) {
			const tEnd = performance.now();
			console.log(listItems.length + " items to search prepared in " + (tEnd - tStart) + " milliseconds");
		}
	}

	function getListItem(item) {
		return {
			// keywords representation of the item
			keywords: safeKeywordsFunction(item),
			// item label
			label: safeLabelFunction(item),
			// store reference to the origial item
			item
		};
	}

	function prepareUserEnteredText(userEnteredText) {
		if (userEnteredText === undefined || userEnteredText === null) {
			return "";
		}

		const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
		$$invalidate(48, filteredTextLength = textFiltered.length);

		if (minCharactersToSearch > 1) {
			if (filteredTextLength < minCharactersToSearch) {
				return "";
			}
		}

		const cleanUserEnteredText = textCleanFunction(textFiltered);
		const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();

		if (debug) {
			console.log("Change user entered text '" + userEnteredText + "' into '" + textFilteredLowerCase + "'");
		}

		return textFilteredLowerCase;
	}

	async function search() {
		let tStart;

		if (debug) {
			tStart = performance.now();
			console.log("Searching user entered text: '" + text + "'");
		}

		const textFiltered = prepareUserEnteredText(text);

		if (textFiltered === "") {
			$$invalidate(17, filteredListItems = listItems);
			closeIfMinCharsToSearchReached();

			if (debug) {
				console.log("User entered text is empty set the list of items to all items");
			}

			return;
		}

		// external search which provides items
		if (searchFunction) {
			$$invalidate(28, items = await searchFunction(textFiltered));
			prepareListItems();
		}

		// local search
		let tempfilteredListItems;

		if (localFiltering) {
			const searchWords = textFiltered.split(" ");

			tempfilteredListItems = listItems.filter(listItem => {
				if (!listItem) {
					return false;
				}

				const itemKeywords = listItem.keywords;
				let matches = 0;

				searchWords.forEach(searchWord => {
					if (itemKeywords.includes(searchWord)) {
						matches++;
					}
				});

				return matches >= searchWords.length;
			});
		} else {
			tempfilteredListItems = listItems;
		}

		const hlfilter = highlightFilter(textFiltered, ["label"]);
		const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);
		$$invalidate(17, filteredListItems = filteredListItemsHighlighted);
		closeIfMinCharsToSearchReached();

		if (debug) {
			const tEnd = performance.now();
			console.log("Search took " + (tEnd - tStart) + " milliseconds, found " + filteredListItems.length + " items");
		}
	}

	// $: text, search();
	function selectListItem(listItem) {
		if (debug) {
			console.log("selectListItem");
		}

		if ("undefined" === typeof listItem) {
			if (debug) {
				console.log(`listItem ${i} is undefined. Can not select.`);
			}

			return false;
		}

		const newSelectedItem = listItem.item;

		if (beforeChange(selectedItem, newSelectedItem)) {
			$$invalidate(29, selectedItem = newSelectedItem);
		}

		return true;
	}

	function selectItem() {
		if (debug) {
			console.log("selectItem");
		}

		const listItem = filteredListItems[highlightIndex];

		if (selectListItem(listItem)) {
			close();
		}
	}

	function up() {
		if (debug) {
			console.log("up");
		}

		open();
		if (highlightIndex > 0) $$invalidate(15, highlightIndex--, highlightIndex);
		highlight();
	}

	function down() {
		if (debug) {
			console.log("down");
		}

		open();
		if (highlightIndex < filteredListItems.length - 1) $$invalidate(15, highlightIndex++, highlightIndex);
		highlight();
	}

	function highlight() {
		if (debug) {
			console.log("highlight");
		}

		const query = ".selected";

		if (debug) {
			console.log("Seaching DOM element: " + query + " in " + list);
		}

		const el = list && list.querySelector(query);

		if (el) {
			if (typeof el.scrollIntoViewIfNeeded === "function") {
				if (debug) {
					console.log("Scrolling selected item into view");
				}

				el.scrollIntoViewIfNeeded();
			} else {
				if (debug) {
					console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
				}
			}
		} else {
			if (debug) {
				console.warn("Selected item not found to scroll into view");
			}
		}
	}

	function onListItemClick(listItem) {
		if (debug) {
			console.log("onListItemClick");
		}

		if (selectListItem(listItem)) {
			close();
		}
	}

	function onDocumentClick(e) {
		if (debug) {
			console.log("onDocumentClick: " + JSON.stringify(e.target));
		}

		if (e.target.closest("." + uniqueId)) {
			if (debug) {
				console.log("onDocumentClick inside");
			}

			// resetListToAllItemsAndOpen();
			highlight();
		} else {
			if (debug) {
				console.log("onDocumentClick outside");
			}

			close();
		}
	}

	function onKeyDown(e) {
		if (debug) {
			console.log("onKeyDown");
		}

		let key = e.key;
		if (key === "Tab" && e.shiftKey) key = "ShiftTab";

		const fnmap = {
			Tab: opened ? down.bind(this) : null,
			ShiftTab: opened ? up.bind(this) : null,
			ArrowDown: down.bind(this),
			ArrowUp: up.bind(this),
			Escape: onEsc.bind(this)
		};

		const fn = fnmap[key];

		if (typeof fn === "function") {
			e.preventDefault();
			fn(e);
		}
	}

	function onKeyPress(e) {
		if (debug) {
			console.log("onKeyPress");
		}

		if (e.key === "Enter") {
			e.preventDefault();
			selectItem();
		}
	}

	function onInput(e) {
		if (debug) {
			console.log("onInput");
		}

		$$invalidate(16, text = e.target.value);

		if (inputDelayTimeout) {
			clearTimeout(inputDelayTimeout);
		}

		if (delay) {
			inputDelayTimeout = setTimeout(processInput, delay);
		} else {
			processInput();
		}
	}

	function processInput() {
		search();
		$$invalidate(15, highlightIndex = 0);
		open();
	}

	function onInputClick() {
		if (debug) {
			console.log("onInputClick");
		}

		resetListToAllItemsAndOpen();
	}

	function onEsc(e) {
		if (debug) {
			console.log("onEsc");
		}

		//if (text) return clear();
		e.stopPropagation();

		if (opened) {
			input.focus();
			close();
		}
	}

	function onFocus() {
		if (debug) {
			console.log("onFocus");
		}

		resetListToAllItemsAndOpen();
	}

	function resetListToAllItemsAndOpen() {
		if (debug) {
			console.log("resetListToAllItemsAndOpen");
		}

		$$invalidate(17, filteredListItems = listItems);
		open();

		// find selected item
		if (selectedItem) {
			if (debug) {
				console.log("Searching currently selected item: " + JSON.stringify(selectedItem));
			}

			for (let i = 0; i < listItems.length; i++) {
				const listItem = listItems[i];

				if ("undefined" === typeof listItem) {
					if (debug) {
						console.log(`listItem ${i} is undefined. Skipping.`);
					}

					continue;
				}

				if (debug) {
					console.log("Item " + i + ": " + JSON.stringify(listItem));
				}

				if (selectedItem == listItem.item) {
					$$invalidate(15, highlightIndex = i);

					if (debug) {
						console.log("Found selected item: " + i + ": " + JSON.stringify(listItem));
					}

					highlight();
					break;
				}
			}
		}
	}

	function open() {
		if (debug) {
			console.log("open");
		}

		// check if the search text has more than the min chars required
		if (isMinCharsToSearchReached()) {
			return;
		}

		$$invalidate(47, opened = true);
	}

	function close() {
		if (debug) {
			console.log("close");
		}

		$$invalidate(47, opened = false);

		if (!text && selectFirstIfEmpty) {
			highlightFilter = 0;
			selectItem();
		}
	}

	function isMinCharsToSearchReached() {
		return minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch;
	}

	function closeIfMinCharsToSearchReached() {
		if (isMinCharsToSearchReached()) {
			close();
		}
	}

	function clear() {
		if (debug) {
			console.log("clear");
		}

		$$invalidate(16, text = "");
		$$invalidate(29, selectedItem = undefined);

		setTimeout(() => {
			input.focus();
			close();
		});
	}

	// 'item number one'.replace(/(it)(.*)(nu)(.*)(one)/ig, '<b>$1</b>$2 <b>$3</b>$4 <b>$5</b>')
	function highlightFilter(q, fields) {
		const qs = "(" + q.trim().replace(/\s/g, ")(.*)(") + ")";
		const reg = new RegExp(qs, "ig");
		let n = 1;
		const len = qs.split(")(").length + 1;
		let repl = "";
		for (; n < len; n++) repl += n % 2 ? `<b>$${n}</b>` : `$${n}`;

		return i => {
			const newI = Object.assign({ highlighted: {} }, i);

			if (fields) {
				fields.forEach(f => {
					if (!newI[f]) return;
					newI.highlighted[f] = newI[f].replace(reg, repl);
				});
			}

			return newI;
		};
	}

	function input_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			input = $$value;
			$$invalidate(13, input);
		});
	}

	function input_1_input_handler() {
		text = this.value;
		$$invalidate(16, text);
	}

	const click_handler = listItem => onListItemClick(listItem);

	const pointerenter_handler = i => {
		$$invalidate(15, highlightIndex = i);
	};

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			list = $$value;
			$$invalidate(14, list);
		});
	}

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(28, items = $$props.items);
		if ("searchFunction" in $$props) $$invalidate(31, searchFunction = $$props.searchFunction);
		if ("labelFieldName" in $$props) $$invalidate(32, labelFieldName = $$props.labelFieldName);
		if ("keywordsFieldName" in $$props) $$invalidate(33, keywordsFieldName = $$props.keywordsFieldName);
		if ("valueFieldName" in $$props) $$invalidate(34, valueFieldName = $$props.valueFieldName);
		if ("labelFunction" in $$props) $$invalidate(35, labelFunction = $$props.labelFunction);
		if ("keywordsFunction" in $$props) $$invalidate(36, keywordsFunction = $$props.keywordsFunction);
		if ("valueFunction" in $$props) $$invalidate(37, valueFunction = $$props.valueFunction);
		if ("keywordsCleanFunction" in $$props) $$invalidate(38, keywordsCleanFunction = $$props.keywordsCleanFunction);
		if ("textCleanFunction" in $$props) $$invalidate(39, textCleanFunction = $$props.textCleanFunction);
		if ("beforeChange" in $$props) $$invalidate(40, beforeChange = $$props.beforeChange);
		if ("onChange" in $$props) $$invalidate(41, onChange = $$props.onChange);
		if ("selectFirstIfEmpty" in $$props) $$invalidate(42, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
		if ("minCharactersToSearch" in $$props) $$invalidate(43, minCharactersToSearch = $$props.minCharactersToSearch);
		if ("maxItemsToShowInList" in $$props) $$invalidate(0, maxItemsToShowInList = $$props.maxItemsToShowInList);
		if ("delay" in $$props) $$invalidate(44, delay = $$props.delay);
		if ("localFiltering" in $$props) $$invalidate(45, localFiltering = $$props.localFiltering);
		if ("noResultsText" in $$props) $$invalidate(1, noResultsText = $$props.noResultsText);
		if ("placeholder" in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ("className" in $$props) $$invalidate(3, className = $$props.className);
		if ("inputClassName" in $$props) $$invalidate(4, inputClassName = $$props.inputClassName);
		if ("inputId" in $$props) $$invalidate(5, inputId = $$props.inputId);
		if ("name" in $$props) $$invalidate(6, name = $$props.name);
		if ("title" in $$props) $$invalidate(7, title = $$props.title);
		if ("html5autocomplete" in $$props) $$invalidate(8, html5autocomplete = $$props.html5autocomplete);
		if ("dropdownClassName" in $$props) $$invalidate(9, dropdownClassName = $$props.dropdownClassName);
		if ("hideArrow" in $$props) $$invalidate(10, hideArrow = $$props.hideArrow);
		if ("showClear" in $$props) $$invalidate(11, showClear = $$props.showClear);
		if ("disabled" in $$props) $$invalidate(12, disabled = $$props.disabled);
		if ("debug" in $$props) $$invalidate(46, debug = $$props.debug);
		if ("selectedItem" in $$props) $$invalidate(29, selectedItem = $$props.selectedItem);
		if ("value" in $$props) $$invalidate(30, value = $$props.value);
		if ("$$scope" in $$props) $$invalidate(49, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*selectedItem*/ 536870912) {
			(onSelectedItemChanged());
		}

		if ($$self.$$.dirty[0] & /*items*/ 268435456 | $$self.$$.dirty[1] & /*opened, filteredTextLength*/ 196608) {
			$$invalidate(18, showList = opened && (items && items.length > 0 || filteredTextLength > 0));
		}

		if ($$self.$$.dirty[0] & /*items*/ 268435456) {
			(prepareListItems());
		}
	};

	return [
		maxItemsToShowInList,
		noResultsText,
		placeholder,
		className,
		inputClassName,
		inputId,
		name,
		title,
		html5autocomplete,
		dropdownClassName,
		hideArrow,
		showClear,
		disabled,
		input,
		list,
		highlightIndex,
		text,
		filteredListItems,
		showList,
		uniqueId,
		onListItemClick,
		onDocumentClick,
		onKeyDown,
		onKeyPress,
		onInput,
		onInputClick,
		onFocus,
		clear,
		items,
		selectedItem,
		value,
		searchFunction,
		labelFieldName,
		keywordsFieldName,
		valueFieldName,
		labelFunction,
		keywordsFunction,
		valueFunction,
		keywordsCleanFunction,
		textCleanFunction,
		beforeChange,
		onChange,
		selectFirstIfEmpty,
		minCharactersToSearch,
		delay,
		localFiltering,
		debug,
		opened,
		filteredTextLength,
		$$scope,
		slots,
		input_1_binding,
		input_1_input_handler,
		click_handler,
		pointerenter_handler,
		div0_binding
	];
}

class SimpleAutocomplete extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-77usy-style")) add_css();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				items: 28,
				searchFunction: 31,
				labelFieldName: 32,
				keywordsFieldName: 33,
				valueFieldName: 34,
				labelFunction: 35,
				keywordsFunction: 36,
				valueFunction: 37,
				keywordsCleanFunction: 38,
				textCleanFunction: 39,
				beforeChange: 40,
				onChange: 41,
				selectFirstIfEmpty: 42,
				minCharactersToSearch: 43,
				maxItemsToShowInList: 0,
				delay: 44,
				localFiltering: 45,
				noResultsText: 1,
				placeholder: 2,
				className: 3,
				inputClassName: 4,
				inputId: 5,
				name: 6,
				title: 7,
				html5autocomplete: 8,
				dropdownClassName: 9,
				hideArrow: 10,
				showClear: 11,
				disabled: 12,
				debug: 46,
				selectedItem: 29,
				value: 30
			},
			[-1, -1, -1]
		);
	}
}

export default SimpleAutocomplete;
